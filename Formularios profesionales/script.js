/**
 * ===============================================================================
 * SCRIPT.JS ‚Äî VALIDACI√ìN AVANZADA DE FORMULARIO PROFESIONAL
 * ===============================================================================
 * 
 * Autor: Hector Arciniega
 * Proyecto: Formulario de Registro Profesional con Env√≠o por Email
 * Versi√≥n: 2.0
 * Fecha de creaci√≥n: 26/05/2025
 * Fecha √∫ltima actualizaci√≥n: 04/06/2025
 * 
 * DESCRIPCI√ìN GENERAL:
 * -------------------
 * Este script implementa un sistema completo de validaci√≥n de formularios
 * del lado del cliente (front-end) con las siguientes caracter√≠sticas:
 * 
 * ‚úÖ FUNCIONALIDADES PRINCIPALES:
 * - Validaci√≥n en tiempo real de todos los campos del formulario
 * - Transformaci√≥n autom√°tica de texto a may√∫sculas en campos espec√≠ficos
 * - Restricciones de entrada para evitar caracteres no deseados
 * - Toggle de visibilidad para campos de contrase√±a
 * - Contador de caracteres en tiempo real para textarea
 * - Mensajes de error personalizados y accesibles
 * - Env√≠o seguro del formulario a trav√©s de FormSubmit
 * - Compatibilidad con tecnolog√≠as de asistencia (aria-*)
 * 
 * ‚úÖ CAMPOS VALIDADOS:
 * - Nombre completo (solo letras, sin n√∫meros)
 * - Correo electr√≥nico (formato v√°lido + confirmaci√≥n)
 * - Contrase√±a (complejidad + confirmaci√≥n)
 * - Edad (rango num√©rico v√°lido)
 * - Fecha de nacimiento (no futura)
 * - Comentarios (l√≠mite de caracteres)
 * 
 * ‚úÖ TECNOLOG√çAS UTILIZADAS:
 * - JavaScript ES6+ (const, let, arrow functions, template literals)
 * - DOM API (querySelector, addEventListener, etc.)
 * - HTML5 Validation API (checkValidity)
 * - ARIA para accesibilidad
 * - Regular Expressions para validaci√≥n de patrones
 * 
 * ===============================================================================
 */

// ===============================================================================
// PUNTO DE ENTRADA: EVENTO DOM CONTENT LOADED
// ===============================================================================

/**
 * Event Listener principal que se ejecuta cuando todo el DOM ha sido cargado.
 * 
 * ¬øPor qu√© usar DOMContentLoaded?
 * - Garantiza que todos los elementos HTML est√©n disponibles antes de ejecutar JS
 * - Es m√°s r√°pido que window.onload (no espera im√°genes, CSS externos, etc.)
 * - Evita errores de "elemento no encontrado" si el script se ejecuta antes del HTML
 * 
 * SINTAXIS: document.addEventListener('DOMContentLoaded', callback)
 * PAR√ÅMETROS: 
 * - 'DOMContentLoaded': string - Nombre del evento a escuchar
 * - () => {...}: funci√≥n arrow - Callback que se ejecuta cuando el evento ocurre
 */
document.addEventListener('DOMContentLoaded', () => {

  // ===============================================================================
  // SECCI√ìN 1: CAPTURA DE REFERENCIAS A ELEMENTOS DEL DOM
  // ===============================================================================

  /**
   * SUBSECCI√ìN 1.1: ELEMENTOS PRINCIPALES DEL FORMULARIO
   * ---------------------------------------------------
   * Almacenamos referencias a los elementos m√°s importantes del formulario
   * para evitar consultas repetidas al DOM (mejora el rendimiento).
   */

  /**
   * Referencia al elemento <form> principal
   * getElementById() busca un elemento por su atributo id √∫nico
   * Es m√°s r√°pido que querySelector() para IDs espec√≠ficos
   */
  const form = document.getElementById('professionalForm');

  /**
   * Referencia al contenedor del mensaje de √©xito
   * Se muestra/oculta din√°micamente seg√∫n el resultado de la validaci√≥n
   */
  const success = document.getElementById('successMessage');

  /**
   * SUBSECCI√ìN 1.2: CAMPOS DE ENTRADA (INPUTS)
   * ------------------------------------------
   * Cada const almacena la referencia a un campo espec√≠fico del formulario.
   * Usar const previene reasignaci√≥n accidental de estas referencias cr√≠ticas.
   */

  /**
   * Campo: Nombre completo
   * Restricciones aplicadas: Solo letras, sin n√∫meros, transformaci√≥n a may√∫sculas
   */
  const nameIn = document.getElementById('name');

  /**
   * Campo: Correo electr√≥nico principal
   * Validaciones: Formato de email v√°lido seg√∫n RFC 5322
   */
  const emailIn = document.getElementById('email');

  /**
   * Campo: Confirmaci√≥n de correo electr√≥nico
   * Validaciones: Debe coincidir exactamente con emailIn
   */
  const emailC = document.getElementById('emailConfirm');

  /**
   * Campo: Contrase√±a principal
   * Validaciones: M√≠nimo 8 caracteres, al menos 1 may√∫scula y 1 min√∫scula
   */
  const passIn = document.getElementById('password');

  /**
   * Campo: Confirmaci√≥n de contrase√±a
   * Validaciones: Debe coincidir exactamente con passIn
   */
  const passC = document.getElementById('passwordConfirm');

  /**
   * Campo: Edad
   * Restricciones: Solo n√∫meros, rango entre 1 y 120
   */
  const ageIn = document.getElementById('age');

  /**
   * Campo: Fecha de nacimiento
   * Restricciones: No puede ser fecha futura, formato de fecha v√°lido
   */
  const birthIn = document.getElementById('birthdate');

  /**
   * Campo: Comentarios (textarea)
   * Restricciones: M√°ximo 2000 caracteres
   */
  const commIn = document.getElementById('comments');

  /**
   * Elemento: Contador de caracteres para comentarios
   * Muestra din√°micamente: "X / 2000 caracteres"
   */
  const commCnt = document.getElementById('commentsCounter');

  /**
   * SUBSECCI√ìN 1.3: BOTONES DE TOGGLE PARA CONTRASE√ëAS
   * --------------------------------------------------
   * Estos botones alternan la visibilidad de las contrase√±as (üëÅÔ∏è / üôà)
   */

  /**
   * Bot√≥n toggle para mostrar/ocultar contrase√±a principal
   */
  const togP = document.getElementById('togglePassword');

  /**
   * Bot√≥n toggle para mostrar/ocultar confirmaci√≥n de contrase√±a
   */
  const togPC = document.getElementById('togglePasswordConfirm');

  // ===============================================================================
  // SECCI√ìN 2: CONFIGURACI√ìN INICIAL Y RESTRICCIONES DE INTERFAZ
  // ===============================================================================

  /**
   * SUBSECCI√ìN 2.1: CONFIGURACI√ìN DE FECHA M√ÅXIMA
   * ---------------------------------------------
   * Establece la fecha m√°xima permitida para el campo de fecha de nacimiento.
   * Previene que los usuarios seleccionen fechas futuras.
   */

  if (birthIn) {
    /**
     * new Date() - Crea objeto Date con la fecha/hora actual
     * .toISOString() - Convierte a formato ISO: "2025-06-04T15:30:00.000Z"
     * .split('T')[0] - Separa por 'T' y toma solo la parte de fecha: "2025-06-04"
     * .max - Atributo HTML que establece la fecha m√°xima seleccionable
     */
    birthIn.max = new Date().toISOString().split('T')[0];
  }

  /**
   * SUBSECCI√ìN 2.2: TRANSFORMACI√ìN AUTOM√ÅTICA A MAY√öSCULAS
   * ------------------------------------------------------
   * Convierte autom√°ticamente el texto a may√∫sculas mientras el usuario escribe
   * en campos de tipo "text" (nombre, edad se maneja por separado).
   */

  /**
   * form.querySelectorAll() - Busca TODOS los elementos que coincidan con el selector
   * 'input[type="text"]' - Selector CSS que encuentra inputs con type="text"
   * .forEach() - Itera sobre cada elemento encontrado
   * inp - Par√°metro que representa cada input individual en la iteraci√≥n
   */
  form.querySelectorAll('input[type="text"]').forEach(inp => {
    /**
     * addEventListener('input', callback) - Escucha el evento 'input'
     * Evento 'input' se dispara cada vez que el valor del campo cambia
     * (escribir, borrar, pegar, etc.)
     */
    inp.addEventListener('input', () => {
      /**
       * inp.value - Obtiene el valor actual del campo
       * .toUpperCase() - Convierte todo el texto a may√∫sculas
       * inp.value = - Asigna el nuevo valor transformado de vuelta al campo
       */
      inp.value = inp.value.toUpperCase();
    });
  });

  /**
   * SUBSECCI√ìN 2.3: CONTADOR DE CARACTERES DIN√ÅMICO
   * -----------------------------------------------
   * Actualiza en tiempo real el contador "X / 2000 caracteres" del textarea
   */

  /**
   * Verificaci√≥n de existencia: Previene errores si los elementos no existen
   * Uso del operador && (AND l√≥gico): Solo ejecuta si ambos elementos existen
   */
  if (commIn && commCnt) {
    /**
     * Evento 'input' en textarea: Se dispara cada vez que el contenido cambia
     */
    commIn.addEventListener('input', () => {
      /**
       * Template literal (${}) - Sintaxis ES6 para interpolaci√≥n de variables
       * commIn.value.length - Obtiene la longitud actual del texto
       * .textContent - Establece el contenido de texto (sin HTML)
       */
      commCnt.textContent = `${commIn.value.length} / 2000 caracteres`;
    });
  }

  /**
   * SUBSECCI√ìN 2.4: FUNCIONALIDAD DE TOGGLE DE CONTRASE√ëAS
   * ------------------------------------------------------
   * Implementa la funcionalidad de mostrar/ocultar contrase√±as con iconos
   */

  /**
   * FUNCI√ìN: toggleVisibility
   * -------------------------
   * Funci√≥n pura que alterna entre mostrar y ocultar la contrase√±a
   * 
   * PAR√ÅMETROS:
   * @param {HTMLInputElement} inputField - El campo de contrase√±a a modificar
   * @param {HTMLButtonElement} button - El bot√≥n que contiene el icono
   * 
   * L√ìGICA:
   * - Si type="password" ‚Üí cambia a type="text" (muestra contrase√±a) + icono üôà
   * - Si type="text" ‚Üí cambia a type="password" (oculta contrase√±a) + icono üëÅÔ∏è
   */
  function toggleVisibility(inputField, button) {
    /**
     * Condicional: Verifica el tipo actual del input
     */
    if (inputField.type === 'password') {
      /**
       * RAMA 1: Mostrar contrase√±a
       * inputField.type = 'text' - Cambia el tipo para mostrar el contenido
       * button.textContent = 'üôà' - Cambia el icono a "no mirar"
       */
      inputField.type = 'text';
      button.textContent = 'üôà'; // Icono: "Ocultar contrase√±a"
    } else {
      /**
       * RAMA 2: Ocultar contrase√±a
       * inputField.type = 'password' - Cambia el tipo para ocultar el contenido
       * button.textContent = 'üëÅÔ∏è' - Cambia el icono a "mirar"
       */
      inputField.type = 'password';
      button.textContent = 'üëÅÔ∏è'; // Icono: "Mostrar contrase√±a"
    }
  }

  /**
   * Event Listeners para los botones de toggle
   * Uso de arrow functions para llamar a toggleVisibility con par√°metros espec√≠ficos
   */
  togP.addEventListener('click', () => toggleVisibility(passIn, togP));
  togPC.addEventListener('click', () => toggleVisibility(passC, togPC));

  /**
   * SUBSECCI√ìN 2.5: RESTRICCI√ìN NUM√âRICA PARA CAMPO EDAD
   * ----------------------------------------------------
   * Permite solo d√≠gitos en el campo edad, eliminando cualquier otro car√°cter
   */

  if (ageIn) {
    /**
     * Evento 'input': Se ejecuta cada vez que el valor cambia
     */
    ageIn.addEventListener('input', () => {
      /**
       * EXPRESI√ìN REGULAR: /\D/g
       * - \D: Coincide con cualquier car√°cter que NO sea un d√≠gito (0-9)
       * - g: Bandera global, reemplaza TODAS las ocurrencias, no solo la primera
       * .replace(/\D/g, '') - Reemplaza todos los no-d√≠gitos con cadena vac√≠a
       */
      ageIn.value = ageIn.value.replace(/\D/g, '');
    });
  }

  /**
   * SUBSECCI√ìN 2.6: RESTRICCI√ìN ANTI-N√öMEROS PARA CAMPO NOMBRE
   * ----------------------------------------------------------
   * Previene la entrada de n√∫meros en el campo nombre, tanto al escribir como al pegar
   */

  if (nameIn) {
    /**
     * RESTRICCI√ìN 1: Al escribir
     * Elimina n√∫meros en tiempo real mientras el usuario escribe
     */
    nameIn.addEventListener('input', () => {
      /**
       * EXPRESI√ìN REGULAR: /[0-9]/g
       * - [0-9]: Clase de caracteres que coincide con cualquier d√≠gito
       * - g: Bandera global para reemplazar todas las ocurrencias
       */
      nameIn.value = nameIn.value.replace(/[0-9]/g, '');
    });

    /**
     * RESTRICCI√ìN 2: Al pegar contenido
     * Maneja el caso espec√≠fico cuando el usuario pega texto con Ctrl+V
     */
    nameIn.addEventListener('paste', (e) => {
      /**
       * e.clipboardData.getData('text') - Obtiene el texto del portapapeles
       * Se ejecuta ANTES de que el texto se pegue en el campo
       */
      const pasted = e.clipboardData.getData('text');

      /**
       * EXPRESI√ìN REGULAR: /\d/
       * - \d: Coincide con cualquier d√≠gito (equivalente a [0-9])
       * .test() - M√©todo que devuelve true si encuentra al menos una coincidencia
       */
      if (/\d/.test(pasted)) {
        /**
         * e.preventDefault() - Cancela el evento de pegado por defecto
         * Previene que el texto original (con n√∫meros) se pegue
         */
        e.preventDefault();

        /**
         * += - Operador de concatenaci√≥n
         * A√±ade al valor actual solo la parte del texto pegado SIN n√∫meros
         */
        nameIn.value += pasted.replace(/[0-9]/g, '');
      }
    });
  }

  // ===============================================================================
  // SECCI√ìN 3: SISTEMA DE VALIDACI√ìN Y ENV√çO DEL FORMULARIO
  // ===============================================================================

  /**
   * EVENTO PRINCIPAL: SUBMIT DEL FORMULARIO
   * ---------------------------------------
   * Se ejecuta cuando el usuario presiona el bot√≥n "Enviar informaci√≥n"
   * o cuando se activa el env√≠o por otros medios (Enter, etc.)
   */
  form.addEventListener('submit', e => {
    /**
     * e.preventDefault() - Previene el comportamiento por defecto del formulario
     * ¬øPor qu√©? Para ejecutar nuestras validaciones ANTES del env√≠o real
     * Si las validaciones fallan, el formulario no se enviar√°
     */
    e.preventDefault();

    /**
     * Variable de control de validaci√≥n
     * let (no const) porque su valor puede cambiar durante las validaciones
     * Inicializada como true (optimista): asume que todo estar√° bien
     */
    let valid = true;

    /**
     * SUBSECCI√ìN 3.1: FUNCIONES AUXILIARES PARA MANEJO DE ERRORES
     * -----------------------------------------------------------
     * Estas funciones centralizan la l√≥gica de mostrar/ocultar mensajes de error
     */

    /**
     * FUNCI√ìN: showErr
     * ----------------
     * Muestra un mensaje de error espec√≠fico bajo un campo
     * 
     * @param {string} id - ID del elemento contenedor del mensaje de error
     * @param {string} msg - Texto del mensaje a mostrar
     */
    const showErr = (id, msg) => {
      /**
       * Busca el elemento contenedor del error por su ID
       */
      const el = document.getElementById(id);
      
      /**
       * .textContent - Establece el texto del mensaje (escapa HTML autom√°ticamente)
       * M√°s seguro que .innerHTML para texto plano
       */
      el.textContent = msg;
      
      /**
       * .style.display = 'block' - Hace visible el elemento
       * Por CSS, los mensajes est√°n display: none por defecto
       */
      el.style.display = 'block';
    };

    /**
     * FUNCI√ìN: hideErr
     * ----------------
     * Oculta un mensaje de error y limpia su contenido
     * 
     * @param {string} id - ID del elemento contenedor del mensaje de error
     */
    const hideErr = id => {
      /**
       * Obtiene referencia al elemento de error
       */
      const el = document.getElementById(id);
      
      /**
       * Oculta el elemento estableciendo display: none
       */
      el.style.display = 'none';
      
      /**
       * Limpia el contenido de texto para la pr√≥xima validaci√≥n
       */
      el.textContent = '';
    };

    /**
     * SUBSECCI√ìN 3.2: VALIDACIONES INDIVIDUALES POR CAMPO
     * ---------------------------------------------------
     * Cada bloque valida un campo espec√≠fico siguiendo el mismo patr√≥n:
     * 1. Aplicar regla de validaci√≥n
     * 2. Si falla: marcar como inv√°lido, mostrar error, establecer aria-invalid
     * 3. Si pasa: ocultar error, quitar aria-invalid
     */

    /**
     * VALIDACI√ìN 1: NOMBRE COMPLETO
     * -----------------------------
     * Reglas: Solo letras (incluye acentos espa√±oles y √ë) y espacios
     */
    
    /**
     * EXPRESI√ìN REGULAR: /^[A-Z√Å√â√ç√ì√ö√ë\s]+$/
     * - ^: Inicio de cadena (debe comenzar con caracteres v√°lidos)
     * - [A-Z√Å√â√ç√ì√ö√ë\s]: Clase de caracteres permitidos
     *   - A-Z: Letras may√∫sculas b√°sicas
     *   - √Å√â√ç√ì√ö√ë: Acentos y √ë espa√±oles
     *   - \s: Espacios en blanco
     * - +: Uno o m√°s caracteres de la clase anterior
     * - $: Final de cadena (debe terminar con caracteres v√°lidos)
     * 
     * nameIn.value.trim() - Elimina espacios al inicio y final
     * .test() - Retorna true si la cadena coincide completamente con el patr√≥n
     * ! - Operador NOT, invierte el resultado (true si NO coincide)
     */
    if (!/^[A-Z√Å√â√ç√ì√ö√ë\s]+$/.test(nameIn.value.trim())) {
      valid = false; // Marca el formulario como inv√°lido
      showErr('error-name', 'S√≥lo letras y espacios.'); // Muestra mensaje espec√≠fico
      nameIn.setAttribute('aria-invalid', 'true'); // Accesibilidad: marca campo como inv√°lido
    } else {
      hideErr('error-name'); // Oculta mensaje de error
      nameIn.removeAttribute('aria-invalid'); // Accesibilidad: marca campo como v√°lido
    }

    /**
     * VALIDACI√ìN 2: CORREO ELECTR√ìNICO
     * --------------------------------
     * Utiliza la validaci√≥n nativa del navegador para type="email"
     */
    
    /**
     * Doble verificaci√≥n:
     * 1. !emailIn.value - Verifica que no est√© vac√≠o
     * 2. !emailIn.checkValidity() - Usa la API nativa de validaci√≥n HTML5
     * 
     * checkValidity() valida seg√∫n:
     * - El type="email" del input
     * - El atributo required
     * - Cualquier patr√≥n adicional definido
     */
    if (!emailIn.value || !emailIn.checkValidity()) {
      valid = false;
      showErr('error-email', 'Correo inv√°lido.');
      emailIn.setAttribute('aria-invalid', 'true');
    } else {
      hideErr('error-email');
      emailIn.removeAttribute('aria-invalid');
    }

    /**
     * VALIDACI√ìN 3: CONFIRMACI√ìN DE CORREO
     * ------------------------------------
     * Regla: Debe coincidir exactamente con el correo principal
     */
    
    /**
     * Comparaci√≥n estricta (===) de valores de ambos campos
     * !== - Operador "no estrictamente igual"
     */
    if (emailC.value !== emailIn.value) {
      valid = false;
      showErr('error-emailConfirm', 'Los correos no coinciden.');
      emailC.setAttribute('aria-invalid', 'true');
    } else {
      hideErr('error-emailConfirm');
      emailC.removeAttribute('aria-invalid');
    }

    /**
     * VALIDACI√ìN 4: CONTRASE√ëA PRINCIPAL
     * ----------------------------------
     * Reglas: M√≠nimo 8 caracteres, al menos 1 may√∫scula Y 1 min√∫scula
     */
    
    /**
     * Variable auxiliar que eval√∫a m√∫ltiples condiciones:
     * 
     * CONDICI√ìN 1: passIn.value.length >= 8
     * - Verifica longitud m√≠nima de 8 caracteres
     * 
     * CONDICI√ìN 2: /[a-z]/.test(passIn.value)
     * - Regex [a-z]: Coincide con al menos una letra min√∫scula
     * - .test(): Retorna true si encuentra al menos una coincidencia
     * 
     * CONDICI√ìN 3: /[A-Z]/.test(passIn.value)
     * - Regex [A-Z]: Coincide con al menos una letra may√∫scula
     * 
     * Operador &&: TODAS las condiciones deben ser true para que passOK sea true
     */
    const passOK =
      passIn.value.length >= 8 &&
      /[a-z]/.test(passIn.value) &&
      /[A-Z]/.test(passIn.value);

    /**
     * Si cualquier condici√≥n falla, passOK ser√° false
     */
    if (!passOK) {
      valid = false;
      showErr('error-password', 'M√≠n. 8 caracteres, may√∫sculas y min√∫sculas.');
      passIn.setAttribute('aria-invalid', 'true');
    } else {
      hideErr('error-password');
      passIn.removeAttribute('aria-invalid');
    }

    /**
     * VALIDACI√ìN 5: CONFIRMACI√ìN DE CONTRASE√ëA
     * ----------------------------------------
     * Regla: Debe coincidir exactamente con la contrase√±a principal
     */
    if (passC.value !== passIn.value) {
      valid = false;
      showErr('error-passwordConfirm', 'Las contrase√±as no coinciden.');
      passC.setAttribute('aria-invalid', 'true');
    } else {
      hideErr('error-passwordConfirm');
      passC.removeAttribute('aria-invalid');
    }

    /**
     * VALIDACI√ìN 6: EDAD
     * ------------------
     * Reglas: Debe ser un n√∫mero v√°lido entre 1 y 120
     */
    
    /**
     * Number(ageIn.value) - Convierte el string a n√∫mero
     * Si el string no es num√©rico, retorna NaN (Not a Number)
     */
    const ageVal = Number(ageIn.value);
    
    /**
     * Triple verificaci√≥n:
     * 1. !ageVal - Verifica que no sea 0, NaN, null, undefined, o string vac√≠o
     * 2. ageVal < 1 - Verifica que no sea menor a 1
     * 3. ageVal > 120 - Verifica que no sea mayor a 120
     * 
     * Operador || - Si CUALQUIERA de las condiciones es true, la validaci√≥n falla
     */
    if (!ageVal || ageVal < 1 || ageVal > 120) {
      valid = false;
      showErr('error-age', 'Edad entre 1 y 120.');
      ageIn.setAttribute('aria-invalid', 'true');
    } else {
      hideErr('error-age');
      ageIn.removeAttribute('aria-invalid');
    }

    /**
     * VALIDACI√ìN 7: FECHA DE NACIMIENTO
     * ---------------------------------
     * Reglas: No puede estar vac√≠a y no puede ser fecha futura
     */
    
    /**
     * Doble verificaci√≥n:
     * 1. !birthIn.value - Verifica que no est√© vac√≠o
     * 2. new Date(birthIn.value) > new Date() - Compara fechas
     * 
     * new Date(birthIn.value) - Crea objeto Date desde string "YYYY-MM-DD"
     * new Date() - Crea objeto Date con fecha/hora actual
     * > - Operador de comparaci√≥n entre fechas
     */
    if (!birthIn.value || new Date(birthIn.value) > new Date()) {
      valid = false;
      showErr('error-birthdate', 'Fecha inv√°lida.');
      birthIn.setAttribute('aria-invalid', 'true');
    } else {
      hideErr('error-birthdate');
      birthIn.removeAttribute('aria-invalid');
    }

    /**
     * VALIDACI√ìN 8: COMENTARIOS
     * -------------------------
     * Regla: M√°ximo 2000 caracteres (campo opcional, pero con l√≠mite)
     */
    
    /**
     * .length - Propiedad que retorna el n√∫mero de caracteres en el string
     * > 2000 - Verifica si excede el l√≠mite establecido
     */
    if (commIn.value.length > 2000) {
      valid = false;
      showErr('error-comments', 'M√°x. 2000 caracteres.');
      commIn.setAttribute('aria-invalid', 'true');
    } else {
      hideErr('error-comments');
      commIn.removeAttribute('aria-invalid');
    }

    /**
     * SUBSECCI√ìN 3.3: L√ìGICA DE ENV√çO FINAL
     * -------------------------------------
     * Decide si enviar el formulario o mantener los errores visibles
     */

    /**
     * Verificaci√≥n final: Si todas las validaciones pasaron (valid === true)
     */
    if (valid) {
      /**
       * PASO 1: Ocultar mensaje de √©xito local
       * (FormSubmit manejar√° la confirmaci√≥n despu√©s del env√≠o)
       */
      success.style.display = 'none';
      
      /**
       * PASO 2: Remover el event listener para evitar bucle infinito
       * arguments.callee - Referencia a la funci√≥n actual (este event listener)
       * Esta t√©cnica previene que se ejecute nuevamente la validaci√≥n al enviar
       */
      form.removeEventListener('submit', arguments.callee);
      
      /**
       * PASO 3: Enviar el formulario a FormSubmit
       * .submit() - M√©todo nativo que env√≠a el formulario usando la action URL
       * En este punto, el navegador enviar√° los datos a https://formsubmit.co/email
       */
      form.submit();
    } else {
      /**
       * Si hay errores: Mantener oculto el mensaje de √©xito
       * Los mensajes de error espec√≠ficos ya est√°n visibles por las validaciones anteriores
       */
      success.style.display = 'none';
    }
  });

  /**
   * ===============================================================================
   * FIN DEL EVENT LISTENER PRINCIPAL (DOMContentLoaded)
   * ===============================================================================
   */
});

/**
 * ===============================================================================
 * DOCUMENTACI√ìN ADICIONAL: CONCEPTOS T√âCNICOS UTILIZADOS
 * ===============================================================================
 * 
 * üîç PATRONES DE DISE√ëO IMPLEMENTADOS:
 * 
 * 1. EVENT-DRIVEN PROGRAMMING:
 *    - Todo el c√≥digo responde a eventos del usuario (input, click, submit)
 *    - Permite una interfaz reactiva y en tiempo real
 * 
 * 2. SEPARATION OF CONCERNS:
 *    - Validaci√≥n separada de presentaci√≥n
 *    - Funciones auxiliares para tareas espec√≠ficas
 *    - L√≥gica de UI separada de l√≥gica de negocio
 * 
 * 3. PROGRESSIVE ENHANCEMENT:
 *    - Funciona sin JavaScript (formulario b√°sico)
 *    - JavaScript a√±ade mejoras (validaci√≥n, UX)
 *    - Degradaci√≥n elegante en navegadores antiguos
 * 
 * üîß T√âCNICAS DE OPTIMIZACI√ìN:
 * 
 * 1. DOM CACHING:
 *    - Referencias almacenadas en constantes
 *    - Evita consultas repetidas al DOM
 *    - Mejora significativa de rendimiento
 * 
 * 2. EVENT DELEGATION:
 *    - Un solo listener para m√∫ltiples inputs de texto
 *    - Reduce memoria y mejora mantenibilidad
 * 
 * 3. LAZY EVALUATION:
 *    - Validaciones solo cuando es necesario
 *    - Verificaciones de existencia antes de usar elementos
 * 
 * üõ°Ô∏è SEGURIDAD Y ACCESIBILIDAD:
 * 
 * 1. VALIDACI√ìN DUAL:
 *    - Cliente (este script) + Servidor (recomendado)
 *    - Nunca confiar solo en validaci√≥n del cliente
 * 
 * 2. ARIA ATTRIBUTES:
 *    - aria-invalid para tecnolog√≠as de asistencia
 *    - aria-live para anuncios din√°micos
 *    - Mejora accesibilidad para usuarios con discapacidades
 * 
 * 3. SANITIZACI√ìN:
 *    - textContent en lugar de innerHTML
 *    - Previene inyecci√≥n de c√≥digo malicioso
 * 
 * üì± COMPATIBILIDAD:
 * 
 * - ES6+ (Soportado en navegadores modernos desde 2017)
 * - HTML5 Validation API (Soporte universal)
 * - CSS3 Selectors (Soporte universal)
 * - FormData API (Para env√≠o de formularios)
 * 
 * üîÑ FLUJO DE EJECUCI√ìN:
 * 
 * 1. Usuario carga p√°gina ‚Üí DOMContentLoaded se dispara
 * 2. Script captura referencias y configura listeners
